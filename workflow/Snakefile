
#--- snakebids boilerplate

import snakebids
from snakebids import bids, filter_list

configfile: 'cfg/snakebids.yml'

#writes inputs_config.yml and updates config dict
snakebids.generate_inputs_config(config)

#this adds constraints to the bids naming
wildcard_constraints:  **snakebids.get_wildcard_constraints(config)

 
#--- rest of workflow below

#things to explain:
# - using the bids() function to get bids names
# - using input_path to get pybids inputs
# - using **input_wildcards with the bids() function to include wildcards grabbed from pybids  -- introduce more than subject/session
# - using expand() with **subj_wildcards to automatically deal with optional session-level
# - using expand() with input_lists to specify values in target rules
# - using expand() with input_zip_lists when not all combinations of wildcards exist
# - using filter_list() when need to expand over subset of wildcards


rule all:
    input: 
        # using the zip lists to expand over all scans, note use of the zip option in expand:
        denoised = expand(bids(root='results',desc='denoised',suffix='bold.nii.gz',**config['input_wildcards']['preproc_bold']), zip, **config['input_zip_lists']['preproc_bold']),

rule import_bold:
    input: config['input_path']['preproc_bold']
    output: bids(root='results',desc='preproc',suffix='bold.nii.gz',**config['input_wildcards']['preproc_bold'])
    shell: 'cp {input} {output}'

rule denoise:
    input: 
        nii = bids(root='results',desc='preproc',suffix='bold.nii.gz',**config['input_wildcards']['preproc_bold']),
        confounds_tsv = config['input_path']['confounds'],
        mask_nii = config['input_path']['preproc_mask']
    params:
        confounds_to_use = config['confounds']
    output: bids(root='results',desc='denoised',suffix='bold.nii.gz',**config['input_wildcards']['preproc_bold'])
    conda:
        'envs/nilearn.yml'
    script: '../scripts/denoise.py'

   

